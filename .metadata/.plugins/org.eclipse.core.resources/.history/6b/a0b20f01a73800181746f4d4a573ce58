package homework180404;

import java.util.*;


public class PanmaiImpl implements Panmai {
	
	private HashMap<String, ProductVO> map1 = new HashMap<String, ProductVO>();
	private HashMap<String, SaleVO> map2 = new HashMap<String, SaleVO>();
	private Vector< SaleVO> vec = new Vector< SaleVO>();
	private Scanner sc = new Scanner(System.in);
	
	@Override
	public void insertProduct() {
		// TODO Auto-generated method stub
		
		System.out.println("===상품등록===");
		
		String code;
		System.out.print("상품코드 : ");
		code = sc.next();
		
		if(map1.containsKey(code)) {
			System.out.println("이미 등록된 상품코드입니다.");
			return;
		}
		
		ProductVO pv = new ProductVO();
		
		System.out.print("상품명 : ");
		pv.setPname(sc.next());
		System.out.print("단가 : ");
		pv.setPrice(sc.nextInt());
		System.out.print("수량 : ");
		pv.setQuantity(sc.nextInt());
		
		
		map1.put(code, pv);

		System.out.println("===등록완료===");

		

	}

	@Override
	public void insertQuantity() {
		// TODO Auto-generated method stub
		
		System.out.println("===수량등록===");
		System.out.print("상품코드 : ");
		String code = sc.next();
		System.out.println("현재수량 : " + map1.get(code).getQuantity());
		System.out.print("추가 수량 : ");
		int x = sc.nextInt();
		map1.get(code).setQuantity(map1.get(code).getQuantity()+x);
		
		

	}

	@Override
	public void searchProduct() {
		// TODO Auto-generated method stub

		System.out.println("===상품코드검색===");
		System.out.print("상품코드 : ");
		String code = sc.next();

		if (!map1.containsKey(code)) {
			System.out.println("등록된 상품코드가 아닙니다.");
			return;
		}

		System.out.println("코드 \t 상품명 \t 단가 \t 수량");

		System.out.println("--------------------------------------");

		System.out.println(code + " \t " + map1.get(code).getPname() + " \t " 
		+ map1.get(code).getPrice() + " \t " + map1.get(code).getQuantity());
	}

	@Override
	public void listProduct() {
		// TODO Auto-generated method stub

		System.out.println("===상품리스트===");

		Set<Map.Entry<String, ProductVO>> set = map1.entrySet();

		Iterator<Map.Entry<String, ProductVO>> it = set.iterator();
		
		System.out.println("코드 \t 상품명 \t 단가 \t 수량");
		
		System.out.println("--------------------------------------");
		
		while(it.hasNext()) {
			Map.Entry<String, ProductVO> me = it.next();
			System.out.println(me.getKey() + " \t " + me.getValue().getPname() + " \t " + me.getValue().getPrice()
					+ " \t " + me.getValue().getQuantity());
		}

	}

	/*
	public SaleVO readScore(String code) {// 위에꺼 끌고와서 적용

		SaleVO sv = null;

		for (SaleVO temp : vec) {
			if (temp.getCode().equals(code)) {
				sv = temp;
				break;
			}
		}

		return sv;

	}
	*/
	
	@Override
	public void insertSale() {
		// TODO Auto-generated method stub
		
		/////////////////////////
		/*
		System.out.println("===상품판매===");
		
		String code;
		System.out.print("상품 코드 : ");
		code = sc.next();
		
		if(!map1.containsKey(code)) {
			System.out.println("등록된 상품코드가 아닙니다.");
			return;
		}
		
		SaleVO sv = new SaleVO();
		
		sv.setCode(code);
		
		System.out.print("고객명 : ");
		sv.setSname(sc.next());
		System.out.print("판매일 : ");
		sv.setCreated(sc.next());
		System.out.print("판매수량 : ");
		sv.setQuantity(sc.nextInt());
		
		
		
		if(map2.containsKey(code)) {
			
		} else {
			
		}
		
		map2.put(code, sv);
		map1.get(code).setQuantity(map1.get(code).getQuantity()-map2.get(code).getQuantity());
				
		System.out.println("===판매완료===");
		*/
		////////////////////////////////////////
		
		
		///////////////////////////////////////

		String code;
		System.out.print("상품 코드 : ");
		code = sc.next();
		
		if (!map1.containsKey(code)) {
			System.out.println("등록된 상품코드가 없습니다.");
			return;
		}

		SaleVO sv = new SaleVO();

		sv.setCode(code);

		System.out.print("고객명 : ");
		sv.setSname(sc.next());
		System.out.print("판매일 : ");
		sv.setCreated(sc.next());
		System.out.print("판매수량 : ");
		sv.setQuantity(sc.nextInt());

		vec.add(map2.put(code, sv));
		// map2.put(code, sv);
		map1.get(code).setQuantity(map1.get(code).getQuantity() - map2.get(code).getQuantity());
		
		

	}


	@Override
	public void searchSale() {
		// TODO Auto-generated method stub

		////////////////////////////////
		/*
		 * System.out.println("===판매현황검색==="); System.out.print("상품코드 : "); String code
		 * = sc.next(); if(!map1.containsKey(code)) {
		 * System.out.println("등록된 상품코드가 아닙니다."); return; } if(!map2.containsKey(code))
		 * { // or map2.get(code).getCode() != code
		 * System.out.println("판매된 상품코드가 아닙니다."); return; }
		 * 
		 * System.out.println("코드 \t 금액 \t 상품명 \t 고객명 \t 판매일 \t 단가 \t 판매수량");
		 * 
		 * System.out.println(
		 * "--------------------------------------------------------------------");
		 * 
		 * System.out.println(code + " \t " + map1.get(code).getPrice() + " \t " +
		 * map1.get(code).getPname() + " \t " + map2.get(code).getSname() + " \t " +
		 * map2.get(code).getCreated() + " \t " + map1.get(code).getPrice() + " \t " +
		 * map2.get(code).getQuantity());
		 */
		////////////////////////////
		
		
		 System.out.println("===판매현황검색==="); System.out.print("상품코드 : "); String code
		 = sc.next(); if(!map1.containsKey(code)) {
		 System.out.println("등록된 상품코드가 아닙니다."); return; } if(!map2.containsKey(code))
		 { // or map2.get(code).getCode() != code
		 System.out.println("판매된 상품코드가 아닙니다."); return; }
		 
		 System.out.println("코드 \t 금액 \t 상품명 \t 고객명 \t 판매일 \t 단가 \t 판매수량");
		 
		 System.out.println(
		 "--------------------------------------------------------------------");
		 
		 System.out.println(code + " \t " + map1.get(code).getPrice() + " \t " +
		 map1.get(code).getPname() + " \t " + map2.get(code).getSname() + " \t " +
		 map2.get(code).getCreated() + " \t " + map1.get(code).getPrice() + " \t " +
		 map2.get(code).getQuantity());
		 
		
		
		
	}
	
	@Override
	public void listSale() {
		// TODO Auto-generated method stub
		
		//////////////////////////////////
		/*
		System.out.println("===판매리스트===");

		Set<Map.Entry<String, ProductVO>> set1 = map1.entrySet();

		Iterator<Map.Entry<String, ProductVO>> it1 = set1.iterator();
		
		
		Set<Map.Entry<String, SaleVO>> set2 = map2.entrySet();
		
		Iterator<Map.Entry<String, SaleVO>> it2 = set2.iterator();
		
	
		
		
		System.out.println("코드 \t 금액 \t 상품명 \t 고객명 \t 판매일 \t 단가 \t 판매수량");
		
		System.out.println("--------------------------------------------------------------------");
		
		while(it1.hasNext() && it2.hasNext()) {
			Map.Entry<String, ProductVO> me1 = it1.next();
			Map.Entry<String, SaleVO> me2 = it2.next();
			System.out.println(me1.getKey() + " \t " + me1.getValue().getPrice() +
					" \t " + me1.getValue().getPname() + " \t " + me2.getValue().getSname() +
					" \t " + me2.getValue().getCreated() + " \t " + me1.getValue().getPrice() + 
					" \t " + me2.getValue().getQuantity());
		}
		*/
		///////////////////////////////////
		
		
		
		System.out.println("===판매리스트===");

		Set<Map.Entry<String, ProductVO>> set1 = map1.entrySet();

		Iterator<Map.Entry<String, ProductVO>> it1 = set1.iterator();
		
		Iterator<SaleVO> it = vec.iterator();
		
		/*Set<Map.Entry<String, SaleVO>> set2 = map2.entrySet();
		
		Iterator<Map.Entry<String, SaleVO>> it2 = set2.iterator();*/
		
		System.out.println("코드 \t 금액 \t 상품명 \t 고객명 \t 판매일 \t 단가 \t 판매수량");

		System.out.println("--------------------------------------------------------------------");

		while (it1.hasNext() && it.hasNext()) {
			Map.Entry<String, ProductVO> me1 = it1.next();
			SaleVO me2 = it.next();
			System.out.println(me1.getKey() + " \t " + me1.getValue().getPrice() + " \t " + me1.getValue().getPname()
					+ " \t " + me2.getSname() + " \t " + me2.getCreated() + " \t "
					+ me1.getValue().getPrice() + " \t " + me2.getQuantity());
		}

		/*Iterator<ScoreVO> it = list.iterator();

		while (it.hasNext()) { // 벡터에 구성요소가 존재하는지 않하는지 구별
			ScoreVO vo = it.next();
			System.out.println(vo);
		}
		System.out.println();*/

	}

	public void productMainDsp() {

		while (true) {

			int x;

			do {
				System.out.print("||1.상품등록||2.수량등록||3.상품리스트||4.상품코드검색||5.복귀|| > ");
				x = sc.nextInt();

			} while (x < 1 || x > 5);

			switch (x) {
			case 1:
				insertProduct();
				break;
			case 2:
				insertQuantity();
				break;
			case 3:
				listProduct();
				break;
			case 4 :
				searchProduct();
				break;
			case 5 :
				return;
				
			}

		}

	}

	public void saleMainDsp() {
		
while (true) {
			
			int x;

			do {
				System.out.print("||1.상품판매||2.판매현황리스트||3.판매현황검색||4.복귀|| > ");
				x = sc.nextInt();

			} while (x < 1 || x > 4);

			switch (x) {
			case 1:
				insertSale();
				break;
			case 2:
				listSale();
				break;
			case 3:
				searchSale();
				break;
			case 4 :
				return;
				
			}

		}
		

	}

}
