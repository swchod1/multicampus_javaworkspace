package com.homework180408practice;

import java.util.Random;

public class SlotMachineTest2 extends Thread {
	
	Random random = new Random();
	private int[] temp = new int[3];
	int count = 0;
		
	public SlotMachineTest2(int x) {
		// TODO Auto-generated constructor stub
		
		setPriority(x);
		
	}
	
	
	@Override
	public void run() {
		// TODO Auto-generated method stub

		synchronized (this) {
			

			while (true) {

				temp[count] = random.nextInt(3) + 1;

				

				System.out.print(Thread.currentThread().getName() + " : " + temp[count]);
				
				count += 1;
				
				
				
				if (temp[0] != 0 && temp[0] == temp[1] && temp[1] == temp[2]) {
					return;
				}
				
				if(count == 2) {
					count = 0;
				}

				try {
					this.wait();
					
				} catch (InterruptedException e) {
					// TODO: handle exception
				}
				
				
				System.out.println(Thread.activeCount());
				
				// 활성화 되어 있는 스레드 개수
				int xx = Thread.activeCount();
				
				Thread[] th = new Thread[xx];
				
				Thread.enumerate(th);
				
				for(int i = 0; i < th.length; i++) {
					
					System.out.println(th[i].getName() + " : " + th[i].getPriority() + " : " + th[i].isDaemon() + " : "
							+ th[i].isAlive());
					// isD... 데몬인지 아니지, is.A.. 활성화 인지 아닌지
					
					// 스레이 이름, 우선순위, 데몬스레드인지?, 아직 죽지 않은 스레드 인지?
					
				}
				
				
			}
			
			
			
			

		}

	}

	/*
	 * public class ThreadSub extends Thread {
	 * 
	 * private String name; private String lastname;
	 * 
	 * public ThreadSub(String a, String b, int x) {
	 * 
	 * name = a; lastname = b; setPriority(x); // 스레드 우선 순위 setDaemon(true); // 데몬
	 * 스레드 설정
	 * 
	 * }
	 * 
	 * @Override public void run() { // TODO Auto-generated method stub
	 * 
	 * 
	 * // System.out.println(Thread.currentThread());
	 * 
	 * System.out.println(Thread.activeCount());
	 * 
	 * // 활성화 되어 있는 스레드 개수 int xx = Thread.activeCount();
	 * 
	 * Thread[] th = new Thread[xx];
	 * 
	 * Thread.enumerate(th);
	 * 
	 * for(int i = 0; i < th.length; i++) {
	 * 
	 * System.out.println(th[i].getName() + " : " + th[i].getPriority() + " : " +
	 * th[i].isDaemon() + " : " + th[i].isAlive()); // isD... 데몬인지 아니지, is.A.. 활성화
	 * 인지 아닌지
	 * 
	 * // 스레이 이름, 우선순위, 데몬스레드인지?, 아직 죽지 않은 스레드 인지?
	 * 
	 * }
	 * 
	 * while(true) {
	 * 
	 * System.out.print("이름 : " + name);
	 * 
	 * try { sleep(100); } catch (InterruptedException ie) { // TODO: handle
	 * exception
	 * 
	 * ie.printStackTrace(); }
	 * 
	 * System.out.println("\t이름2 : " + lastname);
	 * 
	 * }
	 * 
	 * }
	 * 
	 * }
	 */
	
	

	// 현재 잔액
/*	private long depositeMoney = 10000;

	@Override
	public void run() {
		// TODO Auto-generated method stub

		synchronized (this) { // 제어권으 this에게 주겠다.

			for (int i = 0; i < 10; i++) { // 이 포문

				if (getDepositeMoney() <= 0) {
					break;
				}
				withDraw(1000);

				if (getDepositeMoney() == 2000 || getDepositeMoney() == 4000 || getDepositeMoney() == 6000
						|| getDepositeMoney() == 8000) {

					try {
						this.wait(); // 제어권 중지
						// Thread.sleep(1000);
					} catch (InterruptedException ie) {
						// TODO: handle exception

						ie.printStackTrace();

					}
				}
				else {
					this.notify(); // 제어권 유지?
				}
			}
		}

	}

	public long getDepositeMoney() {
		return depositeMoney;
	}



	public void setDepositeMoney(long depositeMoney) {
		this.depositeMoney = depositeMoney;
	}
	
	public void withDraw(long howMuch) {
		
		if(getDepositeMoney() > 0) {
			depositeMoney -= howMuch;
			// setDepositeMoney(getDepositeMoney()-howMuch);
			
			// 누가 가져갔는지
			System.out.println(Thread.currentThread().getName() + ", ");
			
			// 잔액
			System.out.printf("잔액 : %d원\n", getDepositeMoney());
			
		} else {
			System.out.println(Thread.currentThread().getName() + ", ");
			System.out.println("잔액이 부족합니다.");
		}
	}
		*/
		
		
		

	




	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		SlotMachineTest2 sm1 = new SlotMachineTest2(10);
		SlotMachineTest2 sm2 = new SlotMachineTest2(10);
		SlotMachineTest2 sm3 = new SlotMachineTest2(10);
		
		System.out.println("-------------");
		sm1.start();
		sm2.start();
		sm3.start();
		System.out.println("\t-------------");
		
		
		System.out.println("축하합니다. 당첨되셨습니다.");
		

	}

}
